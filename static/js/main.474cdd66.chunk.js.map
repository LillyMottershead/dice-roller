{"version":3,"sources":["roll.js","App.js","reportWebVitals.js","index.js"],"names":["sumReducer","accumulator","currentValue","singleRollCapturingPattern","whitespacePattern","compoundRollPattern","compoundRollTokensPattern","labelPattern","aliasRollPattern","argPattern","argNameToFunction","compRoll","extra","extraTokens","match","includes","tokens","push","replace","max","minToCrit","tohit","cancrit","crit","RollError","message","this","name","stack","Error","isSingleRoll","str","singleRoll","isMax","sides","times","keep","keepHighest","keepNotation","notation","rolls","i","num","Math","ceil","random","kept","discardedRolls","sort","a","b","reverse","slice","forEach","roll","keptRolls","filter","map","result","reduce","desc","join","target","repl","indexOf","compoundRoll","critRule","res","label","Array","from","matchAll","x","replaceAll","args","index","length","arr","params","split","arg","tokensWithRolls","token","dice","undefined","concat","tokensEvaluated","Function","find","rollDouble","extraRolls","critDesc","critResult","fullString","critString","aliasArgs","argsString","keys","Object","argFunction","rollIndex","deleteCommand","aliases","JSON","parse","localStorage","targetAlias","setItem","stringify","alias","prototype","command","frontToken","listAliases","aliasCode","aliasCommand","callAlias","App","props","settings","state","page","onPageClick","bind","onSettingsChange","e","setState","value","className","onClick","show","React","Component","Main","rollCommand","output","calls","currKey","log","components","textInputRef","createRef","onRollFormChange","onLogClear","hideCall","handleCommand","onSubmit","preventDefault","current","focus","newOutput","pushToLog","pop","unshift","Roll","err","Call","handleClose","getRolls","RollForm","style","alignItems","Aliases","handleUpload","Log","Settings","critRuleRadioButton","content","RadioButton","onChange","checked","textAlign","fontSize","paddingTop","type","margin","ref","autoFocus","width","position","CloseButton","color","DieImage","die","marginBottom","fileName","process","colorOrGray","src","alt","height","AliasButton","aliasName","padding","border","cursor","right","top","x1","y1","x2","y2","stroke","strokeWidth","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.474cdd66.chunk.js","sourcesContent":["// Reducer for Array.reduce() that sums all elements in aray\r\nconst sumReducer = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n// Regex patterns\r\nconst singleRollCapturingPattern = /^(\\d+)?d(\\d+)(?:k([l-])?(\\d+))?$/;\r\nconst whitespacePattern = /\\s+/;\r\nconst compoundRollPattern = /^(?:(?:(?:\\d+)?d\\d+(?:k(?:[l-])?\\d+)?)|[+\\-*/()]|\\d+|\\s+)+$/;\r\nconst compoundRollTokensPattern = /((?:\\d+)?d\\d+(?:k(?:[l-])?\\d+)?)|([+\\-*/()])|(\\d+)/g;\r\nconst labelPattern = /\\[(.*?)\\]/g;\r\nconst aliasRollPattern = /\\{(.*?)\\}/g;\r\nconst argPattern = /(?:(\\w+)(?:\\((.*?)\\))?)/g;\r\n\r\nconst argNameToFunction = {\r\n    'add': add,\r\n    'replace': replace,\r\n    'adv': (compRoll) => replace(compRoll, 'd20', '2d20k1'),\r\n    'dis': (compRoll) => replace(compRoll, 'd20', '2d20kl1'),\r\n    'max': (compRoll) => compRoll.max = true,\r\n    'tohit': (compRoll, minToCrit = 20) => {\r\n        compRoll.tohit = true;\r\n        compRoll.minToCrit = minToCrit;\r\n    },\r\n    'cancrit': (compRoll) => compRoll.cancrit = true,\r\n    'crit': (compRoll) => compRoll.crit = true,\r\n}\r\n\r\nfunction RollError(message) {\r\n    this.name = 'RollError';\r\n    this.message = message;\r\n    this.stack = (new Error()).stack;\r\n}\r\nRollError.prototype = new Error();\r\n\r\n\r\n/**\r\n * @param {string} str - String to test for being in single roll notation \r\n * @returns {boolean} - True if the str is a single roll, false otherwise\r\n */\r\nfunction isSingleRoll(str) {\r\n    return str.match(singleRollCapturingPattern) !== null;\r\n}\r\n\r\n/**\r\n * @param {string} str - The roll string \r\n * @param {boolean} isMax - True if dice should give max results, false otherwise\r\n * @returns \r\n */\r\nfunction singleRoll(str, isMax=false) {\r\n    let match = str.match(singleRollCapturingPattern);\r\n    if (!match) {\r\n        throw new RollError(`Cannot parse ${str} as a valid roll.`);\r\n    }\r\n    const sides = +match[2], times = +match[1] || 1, keep = +match[4] || 0, keepHighest = !match[3];\r\n    if (sides < 2) {\r\n        throw new RollError(`Less than 2 sides in ${str}`);\r\n    }\r\n    if (times < 1) {\r\n        throw new RollError(`Rolling less than 1 time in ${str}`);\r\n    }\r\n    if (keep < 0) {\r\n        throw new RollError(`Cannot keep less 1 die in ${str}`);\r\n    }\r\n    if (keep > times) {\r\n        throw new RollError(`Cannot keep more die than are rolled in ${str}`);\r\n    }\r\n    let keepNotation = keep? `k${keepHighest? '' : 'l'}${keep}` : '';\r\n    const notation = `${times}d${sides}${keepNotation}`;\r\n    \r\n    const rolls = [];\r\n    for (let i = 0; i < times; i++) {\r\n        rolls.push({\r\n            sides,\r\n            num: isMax? sides : Math.ceil(Math.random() * sides),\r\n            kept: true,\r\n        });\r\n    }\r\n    if (keep < times) {\r\n        let discardedRolls = [...rolls];\r\n        discardedRolls.sort((a, b) => a.num - b.num);\r\n        if (!keepHighest) {\r\n            discardedRolls.reverse();\r\n        }\r\n        discardedRolls.slice(0, keep).forEach(roll => roll.kept = false);\r\n    }\r\n    let keptRolls = rolls.filter(roll => roll.kept).map(roll => roll.num);\r\n    let result = keptRolls.reduce(sumReducer);\r\n    return {\r\n        sides,\r\n        result,\r\n        rolls,\r\n        desc: `${notation} (${rolls.map(roll => roll.num).join(', ')})`,\r\n    };\r\n}\r\n\r\n/**\r\n * @param {Object} compRoll - The compound roll object\r\n * @param {string} extra - The extra roll string that should be added to the roll\r\n */\r\nfunction add(compRoll, extra) {\r\n    let extraTokens = extra.match(compoundRollTokensPattern);\r\n    if (!'+-*/'.includes(extraTokens[0])) {\r\n        compRoll.tokens.push('+');\r\n    }\r\n    compRoll.tokens.push(...extraTokens);\r\n}\r\n\r\n/**\r\n * @param {Object} compRoll - The compound roll object \r\n * @param {string} target - The target compound roll token that should be replaced \r\n * @param {string} repl - The replacement token\r\n */\r\nfunction replace(compRoll, target, repl) {\r\n    let index = compRoll.tokens.indexOf(target);\r\n    if (index !== -1) {\r\n        compRoll.tokens[compRoll.tokens.indexOf(target)] = repl;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {string} str - The compound roll string \r\n * @param {boolean} crit - Whether or not the roll should have a crit bonus calculation\r\n * @param {string} critRule - The rule for crits, either 'rolldouble', 'doubledice', or 'addmaxdice'\r\n * @returns \r\n */\r\nfunction compoundRoll(str, crit=false, critRule='addmaxdice') {\r\n    let res = {crit,};\r\n    \r\n    // set label and remove from str\r\n    res.label = Array.from(str.matchAll(labelPattern), x => x[1])[0] || '';\r\n    str = str.replaceAll(labelPattern, '');\r\n    \r\n    // get arguments and remove from str\r\n    let args = Array.from(str.matchAll(argPattern));\r\n    args = args.filter(a => !a[0].match(compoundRollPattern));\r\n    args.reverse();\r\n    args.forEach(x => {\r\n        str = `${str.slice(0,x.index)}${str.slice(x.index+x[0].length)}`;\r\n    });\r\n    args.reverse();\r\n    args = args.map(x => {\r\n        let arr = {name: x[1]};\r\n        arr.params = (x[2])? x[2].split(/\\s*,\\s*/) : [];\r\n        return arr;\r\n    });\r\n    \r\n    // tokenize str into compound roll tokens\r\n    if (!str.match(compoundRollPattern)) {\r\n        throw new RollError(`Unknown command.`);\r\n    }\r\n    res.tokens = str.match(compoundRollTokensPattern);\r\n\r\n    // apply arguments\r\n    for (let arg of args) {\r\n        if (argNameToFunction[arg.name]) {\r\n            argNameToFunction[arg.name](res, ...arg.params);\r\n        }\r\n    }\r\n    let tokensWithRolls = res.tokens.map(token => isSingleRoll(token)? singleRoll(token, res.max || false) : token);\r\n    res.dice = tokensWithRolls.filter(token => token.desc !== undefined);\r\n    res.dice = [].concat(...res.dice.map(x => x.rolls))\r\n    res.desc = tokensWithRolls.map(token => token.desc || token).join(' ');\r\n    let tokensEvaluated = tokensWithRolls.map(token => token.result || token).join(' ');\r\n    res.result = Function(`return ${tokensEvaluated};`)();\r\n\r\n    if (res.tohit) {\r\n        res.crit = tokensWithRolls.find(token => token.sides === 20).result >= res.minToCrit || res.crit;\r\n    }\r\n\r\n    if (res.crit && res.cancrit) {\r\n        function rollDouble(max=false) {\r\n            let extraRolls = res.tokens.filter(token => isSingleRoll(token));\r\n            extraRolls = extraRolls.map(token => singleRoll(token, max));\r\n            res.critDesc = extraRolls.map(token => token.desc).join(' + ');\r\n            res.critResult = extraRolls.map(token => token.result).reduce(sumReducer);\r\n        }\r\n        if (critRule === 'rolldouble') {\r\n            rollDouble();\r\n        } else if (critRule === 'doubledice') {\r\n            let rolls = tokensWithRolls.filter(token => (typeof token) === 'object');\r\n            res.critDesc = rolls.map(token => token.desc).join(' + ');\r\n            res.critResult = rolls.map(token => token.result).reduce(sumReducer);\r\n        } else if (critRule === 'addmaxdice') {\r\n            rollDouble(true);\r\n        }\r\n        res.fullString =  `${res.desc} = ${res.result}`;\r\n        res.critString = `CRIT: ${res.critDesc} = ${res.critResult}`;\r\n    } else {\r\n        res.fullString = `${res.desc} = ${res.result}`;\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nfunction aliasArgs(rolls, argsString) {\r\n    let args = Array.from(argsString.matchAll(argPattern));\r\n    args = args.map(x => {\r\n        let arr = {name: x[1]};\r\n        arr.params = (x[2])? x[2].split(/\\s*,\\s*/) : [];\r\n        return arr;\r\n    });\r\n\r\n    for (let arg of args) {\r\n        if (arg.name === 'attack') {\r\n            rolls[0] = rolls[0].concat(' tohit');\r\n            let cancrit = arg.params;\r\n            if (cancrit.length === 0) {\r\n                cancrit = [...new Array(rolls.length).keys()].slice(1);\r\n            }\r\n            cancrit.forEach(x => rolls[x] = rolls[x].concat(' cancrit'));\r\n        } else if (Object.keys(argNameToFunction).includes(arg.name)) {\r\n            let argFunction = argNameToFunction[arg.name];\r\n            let rollIndex;\r\n            if (arg.params.length === argFunction.length - 1) {\r\n                rollIndex = 0;\r\n            } else {\r\n                rollIndex = +arg.params[arg.params.length - 1] - 1;\r\n                arg.params = arg.params.slice(0, arg.params.length);\r\n            }\r\n            arg = `${arg.name}(${arg.params.join(',')})`;\r\n            rolls[rollIndex] = rolls[rollIndex].concat(' ', arg);\r\n        } else {\r\n            throw new RollError(`Unrecognized argument ${arg.name}`);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction deleteCommand(tokens) {\r\n    const aliases = JSON.parse(localStorage.aliases);\r\n    if (tokens.length < 1) {\r\n        throw new RollError(`Missing target alias to delete.`);\r\n    }\r\n    const targetAlias = tokens[0];\r\n    if (!aliases[targetAlias]) {\r\n        throw new RollError(`Alias ${targetAlias} does not exist.`);\r\n    }\r\n    delete aliases[targetAlias];\r\n    localStorage.setItem('aliases', JSON.stringify(aliases));\r\n    return {message: `Removed ${targetAlias} from list of aliases.`, alias: targetAlias};\r\n}\r\n\r\n\r\nfunction aliasCommand(tokens) {\r\n    const aliases = JSON.parse(localStorage.aliases);\r\n    function listAliases() {\r\n        const aliases = JSON.parse(localStorage.aliases);\r\n        if (Object.keys(aliases).length === 0) {\r\n            return {message: `No aliases.`};\r\n        }\r\n        return {message: `Aliases: ${Object.keys(aliases).join(', ')}`,};\r\n    }\r\n    if (tokens.length < 1) {\r\n        return listAliases();\r\n    }\r\n    let frontToken = tokens[0];\r\n    tokens = tokens.slice(1);\r\n    if (frontToken === 'delete') {\r\n        return deleteCommand(tokens);\r\n    } \r\n    if (frontToken === 'list') {\r\n        return listAliases();\r\n    }\r\n    if (tokens.length < 1) {\r\n        if (!aliases[frontToken]) {\r\n            throw new RollError(`Alias ${frontToken} does not exist.`);\r\n        }\r\n        return {message: `${frontToken}: ${aliases[frontToken].rolls.join(', ')}`};\r\n    }\r\n    let aliasCode = tokens.join(' ');\r\n    aliases[frontToken] = {rolls: Array.from(aliasCode.matchAll(aliasRollPattern), x => x[1])};\r\n    aliasCode = aliasCode.replaceAll(aliasRollPattern, '');\r\n    aliasArgs(aliases[frontToken].rolls, aliasCode);\r\n    localStorage.setItem('aliases', JSON.stringify(aliases));\r\n    return {message: `Added ${frontToken} to aliases.`, alias: frontToken};\r\n}\r\n\r\n\r\nfunction callAlias(alias, argsString, critRule) {\r\n    let rolls = JSON.parse(localStorage.aliases)[alias].rolls;\r\n    // add any extra rolls\r\n    rolls = rolls.concat(Array.from(argsString.matchAll(aliasRollPattern), x => x[1]));\r\n    argsString = argsString.replaceAll(aliasRollPattern, '');\r\n    aliasArgs(rolls, argsString);\r\n    let crit = false;\r\n    rolls = rolls.map(x => {\r\n        let roll = compoundRoll(x, crit, critRule=critRule);\r\n        crit = roll.crit || crit;\r\n        return roll;\r\n    });\r\n    return {\r\n        message: `Calling ${alias}:`,\r\n        rolls,\r\n    };\r\n}\r\n\r\n\r\nfunction command(str, critRule) {\r\n    if (str === '') {\r\n        throw new RollError('Empty command.');\r\n    }\r\n    let tokens = str.split(whitespacePattern);\r\n    \r\n    let frontToken = tokens[0];\r\n    tokens = tokens.slice(1);\r\n    if (frontToken === 'alias') {\r\n        return aliasCommand(tokens);\r\n    } else if (frontToken === 'delete') {\r\n        return deleteCommand(tokens);\r\n    } else if (JSON.parse(localStorage.aliases)[frontToken]) {\r\n        return callAlias(frontToken, Array.from(tokens).join(' '), critRule);\r\n    } else {\r\n        return {\r\n            message: `Rolling ${str}:`,\r\n            rolls: [compoundRoll(str, critRule=critRule)],\r\n        };\r\n    }\r\n}\r\n\r\nexport default command;","import React from 'react';\nimport './App.css';\nimport command from './roll.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        if (!localStorage.aliases) {\n            localStorage.setItem('aliases', JSON.stringify({}));\n        }\n        if (!localStorage.settings) {\n            localStorage.setItem('settings', JSON.stringify({critRule: 'rolldouble'}));\n        }\n        this.state = {\n            page: 'roller',\n            settings: JSON.parse(localStorage.settings),\n        };\n        this.onPageClick = this.onPageClick.bind(this);\n        this.onSettingsChange = this.onSettingsChange.bind(this);\n    }\n\n    onPageClick(e) {\n        this.setState({\n            page: e.target.name,\n        });\n    }\n    onSettingsChange(e) {\n        let settings = this.state.settings;\n        settings[e.target.name] = e.target.value;\n        this.setState({\n            settings: settings,\n        });\n        localStorage.setItem('settings', JSON.stringify(settings));\n    }\n\n    render() {\n        return (\n            <div>\n                <h1> quickroll </h1>\n                <span>\n                    <button className='panel input' name='roller' onClick={this.onPageClick}>\n                        Roller\n                    </button>\n                    <button className='panel input' name='settings' onClick={this.onPageClick}>\n                        Settings\n                    </button>\n                </span>\n                <Main show={this.state.page === 'roller'} settings={this.state.settings}/>\n                <Settings show={this.state.page === 'settings'} settings={this.state.settings} onSettingsChange={this.onSettingsChange}/>\n            </div>\n        );\n    }\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rollCommand: '',\n            times: '',\n            output: { calls: [], currKey: 0},\n            aliases: JSON.parse(localStorage.aliases || '{ }'),\n            log: { components: [], currKey: 0 },\n        };\n    \n        this.textInputRef = React.createRef();\n    \n        this.onRollFormChange = this.onRollFormChange.bind(this);\n        this.onLogClear = this.onLogClear.bind(this);\n        this.hideCall = this.hideCall.bind(this);\n        this.handleCommand = this.handleCommand.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onRollFormChange(e) {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({ [name]: value, });\n    }\n    \n    onLogClear(e) {\n        e.preventDefault();\n        this.setState({ log: { components: [], currKey: 0 } });\n    }\n    \n    hideCall(index) {\n        this.setState((state) => {\n            state.output.calls[index] = null;\n            return {output: state.output};\n        });\n        if (this.state.output.calls.filter(x => x !== null).length === 1) {\n            this.setState( { output: { calls: [], currKey: 0 } });\n        }\n        this.textInputRef.current.focus();\n    }\n    \n    handleCommand(rollCommand, times) {\n        function getRolls(rollCommand, index, log, critRule, hideCall) {\n            function pushToLog(log, message) {\n                if (log.components.length > 100) {\n                    log.components.pop();\n                }\n                log.components.unshift(<p key={`log#${log.currKey++}`}> {message} </p>);\n                log.currKey %= 101;\n            }\n            let output;\n            try {\n                output = command(rollCommand, critRule);\n                pushToLog(log, output.message);\n                if (output.rolls) {\n                    output.rolls.forEach(x => {\n                        let message;\n                        if (x.critString) {\n                            message = `${x.fullString}, ${x.critString}, ${x.result} ${x.label}`;\n                        } else {\n                            message = `${x.fullString} ${x.label}`\n                        }\n                        pushToLog(log, message);\n                    });\n                    output = output.rolls.map((x, i) => <Roll key={`roll#${i}`} roll={x} />);\n                } else {\n                    output = <div className='panel flex-child'> {output.message} </div>;\n                }\n            } catch (err) {\n                pushToLog(log, err.message);\n                output = <div className='panel flex-child'> {err.message} </div>;\n            }\n            return <Call key={`call#${index}`} rolls={output} handleClose={() => hideCall(index)}/>;\n        }\n\n        let newOutput = [...new Array(times).keys()].map((x, i) =>\n            getRolls(rollCommand, this.state.output.currKey + i, this.state.log, this.props.settings.critRule, this.hideCall)\n        );\n        this.setState(state => {\n            return {\n                output: {calls: [...state.output.calls, ...newOutput], currKey: state.output.currKey + newOutput.length},\n                aliases: JSON.parse(localStorage.aliases || '{ }'),\n                log: state.log,\n            }\n        });\n        this.textInputRef.current.focus();\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.rollCommand === 'clear') {\n            this.setState({\n                output: {calls: [], currKey: 0},\n            });\n        } else if (this.state.rollCommand === 'clear log') {\n            this.onLogClear(e);\n        } else if (this.state.rollCommand !== '') {\n            this.handleCommand(this.state.rollCommand, +this.state.times || 1);\n        }\n\n        if (this.state.rollCommand !== '') {\n            this.setState({\n                rollCommand: '',\n                times: '',\n            });\n        }\n        this.textInputRef.current.focus();\n    }\n\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        return (\n            <div>\n                <RollForm\n                    rollCommand={this.state.rollCommand}\n                    times={this.state.times}\n                    onRollFormChange={this.onRollFormChange}\n                    onSubmit={this.onSubmit}\n                    textInputRef={this.textInputRef}\n                />\n                <div className='h-container' style={{ alignItems: 'center', }}> {this.state.output.calls.filter((x) => x !== null)} </div>\n                <div className='h-container'>\n                    <Aliases\n                        aliases={this.state.aliases}\n                        handleUpload={this.handleUpload}\n                        handleCommand={this.handleCommand}\n                    />\n                    <Log \n                        log={this.state.log.components} \n                        onLogClear={this.onLogClear}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Settings extends React.Component {\n    render() {\n        if (!this.props.show) {\n            return null;\n        }\n        function critRuleRadioButton(value, content, props) {\n            return (\n                <RadioButton \n                    name='critRule'\n                    value={ value } \n                    onChange={ props.onSettingsChange }\n                    content={ content }\n                    checked={ props.settings.critRule === value }\n                />\n            );\n        }\n        return (\n            <div>\n                <div className='panel' style={{ textAlign: 'left' }}>\n                    <h2 style={{ textAlign: 'center'}}> Settings </h2>\n                    <h3> Crit Rule </h3>\n                    <i style={{ fontSize: '.75em' }}>Note that this only applies to future rolls.</i>\n                    <form style={{ paddingTop: '.75em'}}>\n                        { critRuleRadioButton('rolldouble', 'Roll double the number of dice.', this.props) }<br />\n                        { critRuleRadioButton('doubledice', 'Roll the dice normally and double them.', this.props) }<br />\n                        { critRuleRadioButton('addmaxdice', 'Roll the dice normally and add the maximum possible dice roll on top.', this.props) }<br />\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction RadioButton(props) {\n    return (\n        <label className='input-radio-container'>\n            <input \n                type='radio'\n                name={props.name}\n                value={props.value}\n                onChange={props.onChange}\n                checked={props.checked}\n            />\n            <span className='input-radio-check'></span>\n            {props.content}\n        </label>\n    );\n}\n\nfunction RollForm(props) {\n    return (\n        <form style={{ margin: '10px', }}>\n            <input\n                className='panel input-text'\n                type='text'\n                ref={props.textInputRef}\n                autoFocus\n                name='rollCommand'\n                value={props.rollCommand}\n                onChange={props.onRollFormChange}\n            />\n            <input\n                className='panel input-text'\n                type='text'\n                style={{ width: '30px' }}\n                name='times'\n                value={props.times}\n                onChange={props.onRollFormChange}\n            />\n            <input\n                className='panel input'\n                type='submit'\n                value='>'\n                onClick={props.onSubmit}\n            />\n        </form>\n    );\n}\n\nfunction Call(props) {\n    return (\n        <div\n            className='h-container call'\n            onClick={props.handleClose}\n            style={{ position: 'relative'}}\n        >\n            {props.rolls}\n            <span className='close-button'>\n                <CloseButton color='red'/>\n            </span>\n        </div>\n    );\n}\n\nfunction Roll(props) {\n    let res = props.roll.result + (props.roll.critResult || 0);\n    let label = props.roll.label || '';\n    let fullString = props.roll.fullString || '';\n    let critString = props.roll.critString || '';\n    let dice = props.roll.dice.map((x, i) => <DieImage key={`rollImage#${i}}`} die={x} />);\n    return (\n        <div\n            className='panel flex-child tooltip'\n            style={{ margin: '-1px', marginBottom: '0px' }}\n        >\n            {dice}\n            <p>\n                {res} <span style={{ fontSize: '.75em' }}> {label} </span>\n            </p>\n            <span className='tooltiptext'>\n                {fullString} <br /> {critString}\n            </span>\n        </div>\n    );\n}\n\nfunction DieImage(props) {\n    let fileName = process.env.PUBLIC_URL;\n    let colorOrGray = props.die.kept ? 'dice/' : 'gray_dice/';\n    let sides = props.die.sides;\n    let result = props.die.num;\n    fileName = `${fileName}/${colorOrGray}d${sides}_${result}.svg`;\n    return (\n        <img \n            src={fileName} \n            alt={`${result} (d${sides})`} \n            height='50px' \n        />\n    );\n}\n\nfunction Aliases(props) {\n    let aliases = Object.keys(props.aliases);\n    aliases.sort();\n    aliases = aliases.map((x, i) => (\n        <AliasButton \n            key={`alias#${i}`} \n            aliasName={x}\n            handleCommand={props.handleCommand}\n        />\n    ));\n    return (\n        <div className='panel flex-child aliases'>\n            <label className='h2'> Aliases </label>\n            <div> \n                {aliases} \n            </div>\n        </div>\n    );\n}\n\nfunction AliasButton(props) {\n    return (\n        <div \n            style={{ margin: '5px', padding: '5px', border: '1px #6b6c75 solid', textAlign: 'left', position: 'relative', }}\n        > \n            <div \n                style={{ width: '90%', cursor: 'pointer'}}\n                onClick={() => props.handleCommand(props.aliasName, 1)}\n            >\n                {props.aliasName}\n            </div>\n            <span \n                style={{ position: 'absolute', right: '5px', top: '5px', cursor: 'pointer'}}\n                onClick={() => props.handleCommand(`alias delete ${props.aliasName}`, 1)}\n            >\n                <CloseButton />\n            </span>\n        </div>\n    );\n}\n\nfunction CloseButton(props) {\n    let color = props.color || '#95969e';\n    return (\n        <svg width='10' height='10'>\n            <line x1='0' y1='0' x2='10' y2='10' style={{ stroke: color, strokeWidth: 2}} />\n            <line x1='0' y1='10' x2='10' y2='0' style={{ stroke: color, strokeWidth: 2}} />\n        </svg>\n    );\n}\n\nfunction Log(props) {\n    return (\n        <div className='panel log'>\n            <h2>\n                Log\n                <button className='panel input' onClick={props.onLogClear}>\n                    Clear\n                </button>\n            </h2>\n            <div className='inner-log'>\n                {props.log}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}