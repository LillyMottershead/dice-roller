{"version":3,"sources":["roll.js","App.js","reportWebVitals.js","index.js"],"names":["sumReducer","accumulator","currentValue","singleRollCapturingPattern","whitespacePattern","compoundRollPattern","compoundRollTokensPattern","labelPattern","aliasRollPattern","argPattern","argNameToFunction","compRoll","extra","extraTokens","match","includes","tokens","push","replace","max","minToCrit","tohit","cancrit","crit","RollError","message","this","name","stack","Error","isSingleRoll","str","singleRoll","isMax","sides","times","keep","keepHighest","keepNotation","notation","rolls","i","num","Math","ceil","random","kept","discardedRolls","sort","a","b","reverse","slice","forEach","roll","keptRolls","filter","map","result","reduce","desc","join","target","repl","indexOf","compoundRoll","critRule","res","label","Array","from","matchAll","x","replaceAll","args","index","length","arr","params","split","arg","tokensWithRolls","token","dice","undefined","concat","tokensEvaluated","Function","find","rollDouble","extraRolls","critDesc","critResult","fullString","critString","aliasArgs","argsString","keys","Object","argFunction","rollIndex","deleteCommand","aliases","JSON","parse","localStorage","targetAlias","setItem","stringify","alias","prototype","command","frontToken","listAliases","aliasCode","aliasCommand","callAlias","App","props","React","Component","Main","onRollFormChange","e","value","setState","onLogClear","preventDefault","log","components","currKey","onSubmit","state","rollCommand","output","pushToLog","pop","unshift","className","err","getRolls","textInputRef","current","focus","createRef","bind","handleUpload","RollForm","type","ref","autoFocus","onChange","style","width","onClick","Call","border","margin","maxWidth","Roll","die","fontSize","DieImage","fileName","colorOrGray","src","alt","height","Aliases","padding","Log","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQACMA,EAAa,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,GAG1DC,EAA6B,mCAC7BC,EAAoB,MACpBC,EAAsB,8DACtBC,EAA4B,sDAC5BC,EAAe,aACfC,EAAmB,aACnBC,EAAa,2BAEbC,EAAoB,CACtB,IAqFJ,SAAaC,EAAUC,GAAQ,IAAD,EACtBC,EAAcD,EAAME,MAAMR,GACzB,OAAOS,SAASF,EAAY,KAC7BF,EAASK,OAAOC,KAAK,MAEzB,EAAAN,EAASK,QAAOC,KAAhB,oBAAwBJ,KAzFxB,QAAWK,EACX,IAAO,SAACP,GAAD,OAAcO,EAAQP,EAAU,MAAO,WAC9C,IAAO,SAACA,GAAD,OAAcO,EAAQP,EAAU,MAAO,YAC9C,IAAO,SAACA,GAAD,OAAcA,EAASQ,KAAM,GACpC,MAAS,SAACR,GAA8B,IAApBS,EAAmB,uDAAP,GAC5BT,EAASU,OAAQ,EACjBV,EAASS,UAAYA,GAEzB,QAAW,SAACT,GAAD,OAAcA,EAASW,SAAU,GAC5C,KAAQ,SAACX,GAAD,OAAcA,EAASY,MAAO,IAG1C,SAASC,EAAUC,GACfC,KAAKC,KAAO,YACZD,KAAKD,QAAUA,EACfC,KAAKE,OAAS,IAAIC,OAASD,MAS/B,SAASE,EAAaC,GAClB,OAAiD,OAA1CA,EAAIjB,MAAMX,GAQrB,SAAS6B,EAAWD,GAAmB,IAAdE,EAAa,wDAC9BnB,EAAQiB,EAAIjB,MAAMX,GACtB,IAAKW,EACD,MAAM,IAAIU,EAAJ,uBAA8BO,EAA9B,sBAEV,IAAMG,GAASpB,EAAM,GAAIqB,GAASrB,EAAM,IAAM,EAAGsB,GAAQtB,EAAM,IAAM,EAAGuB,GAAevB,EAAM,GAC7F,GAAIoB,EAAQ,EACR,MAAM,IAAIV,EAAJ,+BAAsCO,IAEhD,GAAII,EAAQ,EACR,MAAM,IAAIX,EAAJ,sCAA6CO,IAEvD,GAAIK,EAAO,EACP,MAAM,IAAIZ,EAAJ,oCAA2CO,IAErD,GAAIK,EAAOD,EACP,MAAM,IAAIX,EAAJ,kDAAyDO,IAMnE,IAJA,IAAIO,EAAeF,EAAK,IAAD,OAAMC,EAAa,GAAK,KAAxB,OAA8BD,GAAS,GACxDG,EAAQ,UAAMJ,EAAN,YAAeD,GAAf,OAAuBI,GAE/BE,EAAQ,GACLC,EAAI,EAAGA,EAAIN,EAAOM,IACvBD,EAAMvB,KAAK,CACPiB,QACAQ,IAAKT,EAAOC,EAAQS,KAAKC,KAAKD,KAAKE,SAAWX,GAC9CY,MAAM,IAGd,GAAIV,EAAOD,EAAO,CACd,IAAIY,EAAc,UAAOP,GACzBO,EAAeC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEP,IAAMQ,EAAER,OACnCL,GACDU,EAAeI,UAEnBJ,EAAeK,MAAM,EAAGhB,GAAMiB,SAAQ,SAAAC,GAAI,OAAIA,EAAKR,MAAO,KAE9D,IAAIS,EAAYf,EAAMgB,QAAO,SAAAF,GAAI,OAAIA,EAAKR,QAAMW,KAAI,SAAAH,GAAI,OAAIA,EAAKZ,OAC7DgB,EAASH,EAAUI,OAAO3D,GAC9B,MAAO,CACHkC,QACAwB,SACAlB,QACAoB,KAAK,GAAD,OAAKrB,EAAL,aAAkBC,EAAMiB,KAAI,SAAAH,GAAI,OAAIA,EAAKZ,OAAKmB,KAAK,MAAnD,MAqBZ,SAAS3C,EAAQP,EAAUmD,EAAQC,IAEhB,IADHpD,EAASK,OAAOgD,QAAQF,KAEhCnD,EAASK,OAAOL,EAASK,OAAOgD,QAAQF,IAAWC,GAW3D,SAASE,EAAalC,GAAyC,IAAD,EAAnCR,EAAmC,wDAAvB2C,EAAuB,uDAAd,aACxCC,EAAM,CAAC5C,QAGX4C,EAAIC,MAAQC,MAAMC,KAAKvC,EAAIwC,SAAShE,IAAe,SAAAiE,GAAC,OAAIA,EAAE,MAAI,IAAM,GACpEzC,EAAMA,EAAI0C,WAAWlE,EAAc,IAGnC,IAAImE,EAAOL,MAAMC,KAAKvC,EAAIwC,SAAS9D,IAcnC,IAbAiE,EAAOA,EAAKlB,QAAO,SAAAP,GAAC,OAAKA,EAAE,GAAGnC,MAAMT,OAC/B8C,UACLuB,EAAKrB,SAAQ,SAAAmB,GACTzC,EAAG,UAAMA,EAAIqB,MAAM,EAAEoB,EAAEG,QAApB,OAA6B5C,EAAIqB,MAAMoB,EAAEG,MAAMH,EAAE,GAAGI,YAE3DF,EAAKvB,UACLuB,EAAOA,EAAKjB,KAAI,SAAAe,GACZ,IAAIK,EAAM,CAAClD,KAAM6C,EAAE,IAEnB,OADAK,EAAIC,OAAUN,EAAE,GAAKA,EAAE,GAAGO,MAAM,WAAa,GACtCF,MAIN9C,EAAIjB,MAAMT,GACX,MAAM,IAAImB,EAAJ,oBAEV2C,EAAInD,OAASe,EAAIjB,MAAMR,GAzBmC,oBA4B1CoE,GA5B0C,IA4B1D,2BAAsB,CAAC,IAAdM,EAAa,QACdtE,EAAkBsE,EAAIrD,OACtBjB,EAAkBsE,EAAIrD,MAAtB,MAAAjB,EAAiB,CAAWyD,GAAX,mBAAmBa,EAAIF,WA9BU,8BAiC1D,IAAIG,EAAkBd,EAAInD,OAAOyC,KAAI,SAAAyB,GAAK,OAAIpD,EAAaoD,GAAQlD,EAAWkD,EAAOf,EAAIhD,MAAO,GAAS+D,KACzGf,EAAIgB,KAAOF,EAAgBzB,QAAO,SAAA0B,GAAK,YAAmBE,IAAfF,EAAMtB,QACjDO,EAAIgB,MAAO,MAAGE,OAAH,oBAAalB,EAAIgB,KAAK1B,KAAI,SAAAe,GAAC,OAAIA,EAAEhC,WAC5C2B,EAAIP,KAAOqB,EAAgBxB,KAAI,SAAAyB,GAAK,OAAIA,EAAMtB,MAAQsB,KAAOrB,KAAK,KAClE,IAAIyB,EAAkBL,EAAgBxB,KAAI,SAAAyB,GAAK,OAAIA,EAAMxB,QAAUwB,KAAOrB,KAAK,KAO/E,GANAM,EAAIT,OAAS6B,SAAS,UAAD,OAAWD,EAAX,KAARC,GAETpB,EAAI9C,QACJ8C,EAAI5C,KAAO0D,EAAgBO,MAAK,SAAAN,GAAK,OAAoB,KAAhBA,EAAMhD,SAAcwB,QAAUS,EAAI/C,WAAa+C,EAAI5C,MAG5F4C,EAAI5C,MAAQ4C,EAAI7C,QAAS,CAAC,IACjBmE,EAAT,WAAgC,IAAZtE,EAAW,wDACvBuE,EAAavB,EAAInD,OAAOwC,QAAO,SAAA0B,GAAK,OAAIpD,EAAaoD,MACzDQ,EAAaA,EAAWjC,KAAI,SAAAyB,GAAK,OAAIlD,EAAWkD,EAAO/D,MACvDgD,EAAIwB,SAAWD,EAAWjC,KAAI,SAAAyB,GAAK,OAAIA,EAAMtB,QAAMC,KAAK,OACxDM,EAAIyB,WAAaF,EAAWjC,KAAI,SAAAyB,GAAK,OAAIA,EAAMxB,UAAQC,OAAO3D,IAElE,GAAiB,eAAbkE,EACAuB,SACG,GAAiB,eAAbvB,EAA2B,CAClC,IAAI1B,EAAQyC,EAAgBzB,QAAO,SAAA0B,GAAK,MAAuB,kBAAXA,KACpDf,EAAIwB,SAAWnD,EAAMiB,KAAI,SAAAyB,GAAK,OAAIA,EAAMtB,QAAMC,KAAK,OACnDM,EAAIyB,WAAapD,EAAMiB,KAAI,SAAAyB,GAAK,OAAIA,EAAMxB,UAAQC,OAAO3D,OACrC,eAAbkE,GACPuB,GAAW,GAEftB,EAAI0B,WAAJ,UAAqB1B,EAAIP,KAAzB,cAAmCO,EAAIT,QACvCS,EAAI2B,WAAJ,gBAA0B3B,EAAIwB,SAA9B,cAA4CxB,EAAIyB,iBAEhDzB,EAAI0B,WAAJ,UAAoB1B,EAAIP,KAAxB,cAAkCO,EAAIT,QAE1C,OAAOS,EAIX,SAAS4B,EAAUvD,EAAOwD,GACtB,IAAItB,EAAOL,MAAMC,KAAK0B,EAAWzB,SAAS9D,IAC1CiE,EAAOA,EAAKjB,KAAI,SAAAe,GACZ,IAAIK,EAAM,CAAClD,KAAM6C,EAAE,IAEnB,OADAK,EAAIC,OAAUN,EAAE,GAAKA,EAAE,GAAGO,MAAM,WAAa,GACtCF,KALuB,oBAQlBH,GARkB,IAQlC,2BAAsB,CAAC,IAAdM,EAAa,QAClB,GAAiB,WAAbA,EAAIrD,KAAmB,CACvBa,EAAM,GAAKA,EAAM,GAAG6C,OAAO,UAC3B,IAAI/D,EAAU0D,EAAIF,OACK,IAAnBxD,EAAQsD,SACRtD,EAAU,YAAI,IAAI+C,MAAM7B,EAAMoC,QAAQqB,QAAQ7C,MAAM,IAExD9B,EAAQ+B,SAAQ,SAAAmB,GAAC,OAAIhC,EAAMgC,GAAKhC,EAAMgC,GAAGa,OAAO,mBAC7C,KAAIa,OAAOD,KAAKvF,GAAmBK,SAASiE,EAAIrD,MAYnD,MAAM,IAAIH,EAAJ,gCAAuCwD,EAAIrD,OAXjD,IAAIwE,EAAczF,EAAkBsE,EAAIrD,MACpCyE,OAAS,EACTpB,EAAIF,OAAOF,SAAWuB,EAAYvB,OAAS,EAC3CwB,EAAY,GAEZA,GAAapB,EAAIF,OAAOE,EAAIF,OAAOF,OAAS,GAAK,EACjDI,EAAIF,OAASE,EAAIF,OAAO1B,MAAM,EAAG4B,EAAIF,OAAOF,SAEhDI,EAAG,UAAMA,EAAIrD,KAAV,YAAkBqD,EAAIF,OAAOjB,KAAK,KAAlC,KACHrB,EAAM4D,GAAa5D,EAAM4D,GAAWf,OAAO,IAAKL,KA1BtB,+BAkCtC,SAASqB,EAAcrF,GACnB,IAAMsF,EAAUC,KAAKC,MAAMC,aAAaH,SACxC,GAAItF,EAAO4D,OAAS,EAChB,MAAM,IAAIpD,EAAJ,mCAEV,IAAMkF,EAAc1F,EAAO,GAC3B,IAAKsF,EAAQI,GACT,MAAM,IAAIlF,EAAJ,gBAAuBkF,EAAvB,qBAIV,cAFOJ,EAAQI,GACfD,aAAaE,QAAQ,UAAWJ,KAAKK,UAAUN,IACxC,CAAC7E,QAAQ,WAAD,OAAaiF,EAAb,0BAAkDG,MAAOH,GAhN5ElF,EAAUsF,UAAY,IAAIjF,MA+RXkF,MAtBf,SAAiBhF,GACb,GAAY,KAARA,EACA,MAAM,IAAIP,EAAU,kBAExB,IAAIR,EAASe,EAAIgD,MAAM3E,GAEnB4G,EAAahG,EAAO,GAExB,OADAA,EAASA,EAAOoC,MAAM,GACH,UAAf4D,EA7DR,SAAsBhG,GAClB,IAAMsF,EAAUC,KAAKC,MAAMC,aAAaH,SACxC,SAASW,IACL,IAAMX,EAAUC,KAAKC,MAAMC,aAAaH,SACxC,OAAoC,IAAhCJ,OAAOD,KAAKK,GAAS1B,OACd,CAACnD,QAAQ,eAEb,CAACA,QAAQ,YAAD,OAAcyE,OAAOD,KAAKK,GAASzC,KAAK,QAE3D,GAAI7C,EAAO4D,OAAS,EAChB,OAAOqC,IAEX,IAAID,EAAahG,EAAO,GAExB,GADAA,EAASA,EAAOoC,MAAM,GACH,WAAf4D,EACA,OAAOX,EAAcrF,GAEzB,GAAmB,SAAfgG,EACA,OAAOC,IAEX,GAAIjG,EAAO4D,OAAS,EAAG,CACnB,IAAK0B,EAAQU,GACT,MAAM,IAAIxF,EAAJ,gBAAuBwF,EAAvB,qBAEV,MAAO,CAACvF,QAAQ,GAAD,OAAKuF,EAAL,aAAoBV,EAAQU,GAAYxE,MAAMqB,KAAK,QAEtE,IAAIqD,EAAYlG,EAAO6C,KAAK,KAK5B,OAJAyC,EAAQU,GAAc,CAACxE,MAAO6B,MAAMC,KAAK4C,EAAU3C,SAAS/D,IAAmB,SAAAgE,GAAC,OAAIA,EAAE,OACtF0C,EAAYA,EAAUzC,WAAWjE,EAAkB,IACnDuF,EAAUO,EAAQU,GAAYxE,MAAO0E,GACrCT,aAAaE,QAAQ,UAAWJ,KAAKK,UAAUN,IACxC,CAAC7E,QAAQ,SAAD,OAAWuF,EAAX,gBAAqCH,MAAOG,GA+BhDG,CAAanG,GACE,WAAfgG,EACAX,EAAcrF,GACduF,KAAKC,MAAMC,aAAaH,SAASU,GA9BhD,SAAmBH,EAAOb,GACtB,IAAIxD,EAAQ+D,KAAKC,MAAMC,aAAaH,SAASO,GAAOrE,MAGpDuD,EADAvD,EAAQA,EAAM6C,OAAOhB,MAAMC,KAAK0B,EAAWzB,SAAS/D,IAAmB,SAAAgE,GAAC,OAAIA,EAAE,OAC7DwB,GACjB,IAAIzE,GAAO,EAMX,OALAiB,EAAQA,EAAMiB,KAAI,SAAAe,GACd,IAAIlB,EAAOW,EAAaO,EAAGjD,GAE3B,OADAA,EAAO+B,EAAK/B,MAAQA,EACb+B,KAEJ,CACH7B,QAAQ,WAAD,OAAaoF,EAAb,KACPrE,SAkBO4E,CAAUJ,EAAY3C,MAAMC,KAAKtD,GAAQ6C,KAAK,MAE9C,CACHpC,QAAQ,WAAD,OAAaM,EAAb,KACPS,MAAO,CAACyB,EAAalC,M,OCpT3BsF,E,kDACF,WAAYC,GAAQ,IAAD,6BACf,cAAMA,GACDb,aAAaH,SACdG,aAAaE,QAAQ,UAAWJ,KAAKK,UAAU,KAHpC,E,0CAOnB,WACI,OACI,oCACI,2CACA,cAAC,EAAD,W,GAZEW,IAAMC,WAkBlBC,E,kDACF,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IAiBVI,iBAAoB,SAAAC,GAChB,IAAM7D,EAAS6D,EAAE7D,OACX8D,EAAQ9D,EAAO8D,MACfjG,EAAOmC,EAAOnC,KACpB,EAAKkG,SAAL,eAAiBlG,EAAOiG,KAtBT,EAwBnBE,WAAc,SAAAH,GACVA,EAAEI,iBACF,EAAKF,SAAS,CAAEG,IAAK,CAACC,WAAY,GAAIC,QAAS,MA1BhC,EA4BnBC,SAAY,SAAAR,GAgCR,GA/BAA,EAAEI,iBA+B6B,UAA3B,EAAKK,MAAMC,YACX,EAAKP,WAAWH,GAChB,EAAKE,SAAS,CACVQ,YAAa,GACblG,MAAO,GACPmG,OAAQ,UAET,GAA+B,KAA3B,EAAKF,MAAMC,YAAoB,CACtC,IAAIlG,GAAS,EAAKiG,MAAMjG,OAAS,EAC7BmG,EAAS,YAAI,IAAIjE,MAAMlC,GAAO8D,QAAQxC,KAAI,SAACe,EAAG/B,GAAJ,OAvClD,SAAkB4F,EAAa1D,EAAOqD,GAClC,SAASO,EAAUP,EAAKvG,GAChBuG,EAAIC,WAAWrD,OAAS,KACxBoD,EAAIC,WAAWO,MAEnBR,EAAIC,WAAWQ,QAAQ,4BAAiChH,GAAjC,cAAeuG,EAAIE,aAC1CF,EAAIE,SAAW,IAEnB,IAAII,EACJ,IACIA,EAASvB,EAAQsB,GACjBE,EAAUP,EAAKM,EAAO7G,SAClB6G,EAAO9F,OACP8F,EAAO9F,MAAMa,SAAQ,SAAAmB,GACbA,EAAEsB,WACFyC,EAAUP,EAAD,UAASxD,EAAEqB,WAAX,aAA0BrB,EAAEsB,WAA5B,aAA2CtB,EAAEd,OAA7C,YAAuDc,EAAEJ,QAElEmE,EAAUP,EAAD,UAASxD,EAAEqB,WAAX,YAAyBrB,EAAEJ,WAG5CkE,EAASA,EAAO9F,MAAMiB,KAAI,SAACe,EAAG/B,GAAJ,OAAU,cAAC,EAAD,CAAwBa,KAAMkB,GAA9B,eAAmB/B,QAEvD6F,EAAS,qBAAKI,UAAU,aAAf,SAA6BJ,EAAO7G,UAEnD,MAAOkH,GACLJ,EAAUP,EAAKW,EAAIlH,SACnB6G,EAASK,EAAIlH,QAEjB,OAAO,cAAC,EAAD,CAA4Be,MAAO8F,GAAnC,eAAmB3D,IAW8BiE,CAAS,EAAKR,MAAMC,YAAa5F,EAAG,EAAK2F,MAAMJ,QACvG,EAAKH,SAAS,CACVQ,YAAa,GACblG,MAAO,GACPmG,OAAQA,EACRhC,QAASC,KAAKC,MAAMC,aAAaH,SAAW,MAC5C0B,IAAK,EAAKI,MAAMJ,MAGxB,EAAKa,aAAaC,QAAQC,SA5ErBtC,aAAaH,SACdG,aAAaE,QAAQ,UAAWJ,KAAKK,UAAU,KAEnD,EAAKwB,MAAQ,CACTC,YAAa,GACblG,MAAO,GACPmG,OAAQ,GACRhC,QAASC,KAAKC,MAAMC,aAAaH,SAAW,MAC5C0B,IAAK,CAAEC,WAAY,GAAIC,QAAS,IAEpC,EAAKW,aAAetB,IAAMyB,YAC1B,EAAKb,SAAW,EAAKA,SAASc,KAAd,gBAChB,EAAKvB,iBAAmB,EAAKA,iBAAiBuB,KAAtB,gBACxB,EAAKnB,WAAa,EAAKA,WAAWmB,KAAhB,gBAfH,E,0CAiFnB,WACI,OACI,oCACQ,cAAC,EAAD,CACIZ,YAAa3G,KAAK0G,MAAMC,YACxBlG,MAAOT,KAAK0G,MAAMjG,MAClBuF,iBAAkBhG,KAAKgG,iBACvBS,SAAUzG,KAAKyG,SACfU,aAAcnH,KAAKmH,eACvB,yBAASH,UAAU,cAAnB,SACKhH,KAAK0G,MAAME,SAEhB,0BAASI,UAAU,cAAnB,UACI,cAAC,EAAD,CAASpC,QAAS5E,KAAK0G,MAAM9B,QAAS4C,aAAcxH,KAAKwH,eACzD,cAAC,EAAD,CAAKlB,IAAKtG,KAAK0G,MAAMJ,IAAIC,WAAYH,WAAYpG,KAAKoG,uB,GAhG3DP,IAAMC,WAsGnB2B,E,4JACF,WACI,OACI,iCACI,uBAAOT,UAAU,aAAaU,KAAK,OAAOC,IAAK3H,KAAK4F,MAAMuB,aAAcS,WAAS,EAAC3H,KAAK,cAAciG,MAAOlG,KAAK4F,MAAMe,YAAakB,SAAU7H,KAAK4F,MAAMI,mBACzJ,uBAAOgB,UAAU,aAAaU,KAAK,OAAOI,MAAO,CAAEC,MAAO,QAAU9H,KAAK,QAAQiG,MAAOlG,KAAK4F,MAAMnF,MAAOoH,SAAU7H,KAAK4F,MAAMI,mBAC/H,uBAAOgB,UAAU,QAAQU,KAAK,SAASxB,MAAM,IAAI8B,QAAShI,KAAK4F,MAAMa,kB,GAN9DZ,IAAMC,WAYvBmC,E,4JACF,WACI,OACI,yBAASjB,UAAU,yBAAyBc,MAAO,CAAEI,OAAQ,OAAQC,OAAQ,OAAQC,SAAU,OAA/F,SACKpI,KAAK4F,MAAM9E,Y,GAJT+E,IAAMC,WAUnBuC,E,4JACF,WACI,IAAI5F,EAAMzC,KAAK4F,MAAMhE,KAAKI,QAAUhC,KAAK4F,MAAMhE,KAAKsC,YAAc,GAC9DxB,EAAQ1C,KAAK4F,MAAMhE,KAAKc,OAAS,GACjCyB,EAAanE,KAAK4F,MAAMhE,KAAKuC,YAAc,GAC3CC,EAAapE,KAAK4F,MAAMhE,KAAKwC,YAAc,GAC3CX,EAAOzD,KAAK4F,MAAMhE,KAAK6B,KAAK1B,KAAI,SAACe,EAAG/B,GAAJ,OAAU,cAAC,EAAD,CAAkCuH,IAAKxF,GAAvC,oBAA4B/B,EAA5B,SAC9C,OACI,sBAAKiG,UAAU,qBAAqBc,MAAO,CAAE,OAAU,OAAQ,aAAgB,OAA/E,UACKrE,EACD,8BAAIhB,EAAI,uBAAMqF,MAAO,CAAES,SAAU,SAAzB,cAAsC7F,QAC9C,uBAAMsE,UAAU,cAAhB,UAA+B7C,EAAW,uBAAOC,Y,GAX9CyB,IAAMC,WAiBnB0C,E,4JACF,WACI,IAAIC,EAAW,UACXC,EAAc1I,KAAK4F,MAAM0C,IAAIlH,KAAO,QAAU,aAElD,OADAqH,EAAQ,UAAMA,GAAN,OAAiBC,EAAjB,YAAgC1I,KAAK4F,MAAM0C,IAAI9H,MAA/C,YAAwDR,KAAK4F,MAAM0C,IAAItH,IAAvE,QAEJ,qBAAK2H,IAAKF,EAAUG,IAAG,gBAAWH,GAAYI,OAAO,a,GAN1ChD,IAAMC,WAWvBgD,E,4JACF,WACI,IAAIlE,EAAUJ,OAAOD,KAAKvE,KAAK4F,MAAMhB,SAGrC,OAFAA,EAAQtD,OACRsD,EAAUA,EAAQ7C,KAAI,SAACe,EAAG/B,GAAJ,OAAU,4BAAuB+B,GAAvB,gBAAiB/B,OAE7C,sBAAKiG,UAAU,qBAAf,UACI,sBAAMc,MAAO,CAAEiB,QAAS,OAAxB,SACI,uBAAO/B,UAAU,KAAjB,uBAEJ,8BACKpC,W,GAXCiB,IAAMC,WAkBtBkD,E,4JACF,WACI,OACI,sBAAKhC,UAAU,iBAAf,UACI,wBAAOA,UAAU,KAAjB,gBAEE,wBAAQA,UAAU,QAAQgB,QAAShI,KAAK4F,MAAMQ,WAA9C,sBAEF,qBAAKY,UAAU,YAAf,SACKhH,KAAK4F,MAAMU,a,GATdT,IAAMC,WAgBTH,ICrMAsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBrF,UACxC,6BAAqBsF,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1dfbc328.chunk.js","sourcesContent":["// Reducer for Array.reduce() that sums all elements in aray\r\nconst sumReducer = (accumulator, currentValue) => accumulator + currentValue;\r\n\r\n// Regex patterns\r\nconst singleRollCapturingPattern = /^(\\d+)?d(\\d+)(?:k([l-])?(\\d+))?$/;\r\nconst whitespacePattern = /\\s+/;\r\nconst compoundRollPattern = /^(?:(?:(?:\\d+)?d\\d+(?:k(?:[l-])?\\d+)?)|[+\\-*/()]|\\d+|\\s+)+$/;\r\nconst compoundRollTokensPattern = /((?:\\d+)?d\\d+(?:k(?:[l-])?\\d+)?)|([+\\-*/()])|(\\d+)/g;\r\nconst labelPattern = /\\[(.*?)\\]/g;\r\nconst aliasRollPattern = /\\{(.*?)\\}/g;\r\nconst argPattern = /(?:(\\w+)(?:\\((.*?)\\))?)/g;\r\n\r\nconst argNameToFunction = {\r\n    'add': add,\r\n    'replace': replace,\r\n    'adv': (compRoll) => replace(compRoll, 'd20', '2d20k1'),\r\n    'dis': (compRoll) => replace(compRoll, 'd20', '2d20kl1'),\r\n    'max': (compRoll) => compRoll.max = true,\r\n    'tohit': (compRoll, minToCrit = 20) => {\r\n        compRoll.tohit = true;\r\n        compRoll.minToCrit = minToCrit;\r\n    },\r\n    'cancrit': (compRoll) => compRoll.cancrit = true,\r\n    'crit': (compRoll) => compRoll.crit = true,\r\n}\r\n\r\nfunction RollError(message) {\r\n    this.name = 'RollError';\r\n    this.message = message;\r\n    this.stack = (new Error()).stack;\r\n}\r\nRollError.prototype = new Error();\r\n\r\n\r\n/**\r\n * @param {string} str - String to test for being in single roll notation \r\n * @returns {boolean} - True if the str is a single roll, false otherwise\r\n */\r\nfunction isSingleRoll(str) {\r\n    return str.match(singleRollCapturingPattern) !== null;\r\n}\r\n\r\n/**\r\n * @param {string} str - The roll string \r\n * @param {boolean} isMax - True if dice should give max results, false otherwise\r\n * @returns \r\n */\r\nfunction singleRoll(str, isMax=false) {\r\n    let match = str.match(singleRollCapturingPattern);\r\n    if (!match) {\r\n        throw new RollError(`Cannot parse ${str} as a valid roll.`);\r\n    }\r\n    const sides = +match[2], times = +match[1] || 1, keep = +match[4] || 0, keepHighest = !match[3];\r\n    if (sides < 2) {\r\n        throw new RollError(`Less than 2 sides in ${str}`);\r\n    }\r\n    if (times < 1) {\r\n        throw new RollError(`Rolling less than 1 time in ${str}`);\r\n    }\r\n    if (keep < 0) {\r\n        throw new RollError(`Cannot keep less 1 die in ${str}`);\r\n    }\r\n    if (keep > times) {\r\n        throw new RollError(`Cannot keep more die than are rolled in ${str}`);\r\n    }\r\n    let keepNotation = keep? `k${keepHighest? '' : 'l'}${keep}` : '';\r\n    const notation = `${times}d${sides}${keepNotation}`;\r\n    \r\n    const rolls = [];\r\n    for (let i = 0; i < times; i++) {\r\n        rolls.push({\r\n            sides,\r\n            num: isMax? sides : Math.ceil(Math.random() * sides),\r\n            kept: true,\r\n        });\r\n    }\r\n    if (keep < times) {\r\n        let discardedRolls = [...rolls];\r\n        discardedRolls.sort((a, b) => a.num - b.num);\r\n        if (!keepHighest) {\r\n            discardedRolls.reverse();\r\n        }\r\n        discardedRolls.slice(0, keep).forEach(roll => roll.kept = false);\r\n    }\r\n    let keptRolls = rolls.filter(roll => roll.kept).map(roll => roll.num);\r\n    let result = keptRolls.reduce(sumReducer);\r\n    return {\r\n        sides,\r\n        result,\r\n        rolls,\r\n        desc: `${notation} (${rolls.map(roll => roll.num).join(', ')})`,\r\n    };\r\n}\r\n\r\n/**\r\n * @param {Object} compRoll - The compound roll object\r\n * @param {string} extra - The extra roll string that should be added to the roll\r\n */\r\nfunction add(compRoll, extra) {\r\n    let extraTokens = extra.match(compoundRollTokensPattern);\r\n    if (!'+-*/'.includes(extraTokens[0])) {\r\n        compRoll.tokens.push('+');\r\n    }\r\n    compRoll.tokens.push(...extraTokens);\r\n}\r\n\r\n/**\r\n * @param {Object} compRoll - The compound roll object \r\n * @param {string} target - The target compound roll token that should be replaced \r\n * @param {string} repl - The replacement token\r\n */\r\nfunction replace(compRoll, target, repl) {\r\n    let index = compRoll.tokens.indexOf(target);\r\n    if (index !== -1) {\r\n        compRoll.tokens[compRoll.tokens.indexOf(target)] = repl;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {string} str - The compound roll string \r\n * @param {boolean} crit - Whether or not the roll should have a crit bonus calculation\r\n * @param {string} critRule - The rule for crits, either 'rolldouble', 'doubledice', or 'addmaxdice'\r\n * @returns \r\n */\r\nfunction compoundRoll(str, crit=false, critRule='addmaxdice') {\r\n    let res = {crit,};\r\n    \r\n    // set label and remove from str\r\n    res.label = Array.from(str.matchAll(labelPattern), x => x[1])[0] || '';\r\n    str = str.replaceAll(labelPattern, '');\r\n    \r\n    // get arguments and remove from str\r\n    let args = Array.from(str.matchAll(argPattern));\r\n    args = args.filter(a => !a[0].match(compoundRollPattern));\r\n    args.reverse();\r\n    args.forEach(x => {\r\n        str = `${str.slice(0,x.index)}${str.slice(x.index+x[0].length)}`;\r\n    });\r\n    args.reverse();\r\n    args = args.map(x => {\r\n        let arr = {name: x[1]};\r\n        arr.params = (x[2])? x[2].split(/\\s*,\\s*/) : [];\r\n        return arr;\r\n    });\r\n    \r\n    // tokenize str into compound roll tokens\r\n    if (!str.match(compoundRollPattern)) {\r\n        throw new RollError(`Unknown command.`);\r\n    }\r\n    res.tokens = str.match(compoundRollTokensPattern);\r\n\r\n    // apply arguments\r\n    for (let arg of args) {\r\n        if (argNameToFunction[arg.name]) {\r\n            argNameToFunction[arg.name](res, ...arg.params);\r\n        }\r\n    }\r\n    let tokensWithRolls = res.tokens.map(token => isSingleRoll(token)? singleRoll(token, res.max || false) : token);\r\n    res.dice = tokensWithRolls.filter(token => token.desc !== undefined);\r\n    res.dice = [].concat(...res.dice.map(x => x.rolls))\r\n    res.desc = tokensWithRolls.map(token => token.desc || token).join(' ');\r\n    let tokensEvaluated = tokensWithRolls.map(token => token.result || token).join(' ');\r\n    res.result = Function(`return ${tokensEvaluated};`)();\r\n\r\n    if (res.tohit) {\r\n        res.crit = tokensWithRolls.find(token => token.sides === 20).result >= res.minToCrit || res.crit;\r\n    }\r\n\r\n    if (res.crit && res.cancrit) {\r\n        function rollDouble(max=false) {\r\n            let extraRolls = res.tokens.filter(token => isSingleRoll(token));\r\n            extraRolls = extraRolls.map(token => singleRoll(token, max));\r\n            res.critDesc = extraRolls.map(token => token.desc).join(' + ');\r\n            res.critResult = extraRolls.map(token => token.result).reduce(sumReducer);\r\n        }\r\n        if (critRule === 'rolldouble') {\r\n            rollDouble();\r\n        } else if (critRule === 'doubledice') {\r\n            let rolls = tokensWithRolls.filter(token => (typeof token) === 'object');\r\n            res.critDesc = rolls.map(token => token.desc).join(' + ');\r\n            res.critResult = rolls.map(token => token.result).reduce(sumReducer);\r\n        } else if (critRule === 'addmaxdice') {\r\n            rollDouble(true);\r\n        }\r\n        res.fullString =  `${res.desc} = ${res.result}`;\r\n        res.critString = `CRIT: ${res.critDesc} = ${res.critResult}`;\r\n    } else {\r\n        res.fullString = `${res.desc} = ${res.result}`;\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nfunction aliasArgs(rolls, argsString) {\r\n    let args = Array.from(argsString.matchAll(argPattern));\r\n    args = args.map(x => {\r\n        let arr = {name: x[1]};\r\n        arr.params = (x[2])? x[2].split(/\\s*,\\s*/) : [];\r\n        return arr;\r\n    });\r\n\r\n    for (let arg of args) {\r\n        if (arg.name === 'attack') {\r\n            rolls[0] = rolls[0].concat(' tohit');\r\n            let cancrit = arg.params;\r\n            if (cancrit.length === 0) {\r\n                cancrit = [...new Array(rolls.length).keys()].slice(1);\r\n            }\r\n            cancrit.forEach(x => rolls[x] = rolls[x].concat(' cancrit'));\r\n        } else if (Object.keys(argNameToFunction).includes(arg.name)) {\r\n            let argFunction = argNameToFunction[arg.name];\r\n            let rollIndex;\r\n            if (arg.params.length === argFunction.length - 1) {\r\n                rollIndex = 0;\r\n            } else {\r\n                rollIndex = +arg.params[arg.params.length - 1] - 1;\r\n                arg.params = arg.params.slice(0, arg.params.length);\r\n            }\r\n            arg = `${arg.name}(${arg.params.join(',')})`;\r\n            rolls[rollIndex] = rolls[rollIndex].concat(' ', arg);\r\n        } else {\r\n            throw new RollError(`Unrecognized argument ${arg.name}`);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction deleteCommand(tokens) {\r\n    const aliases = JSON.parse(localStorage.aliases);\r\n    if (tokens.length < 1) {\r\n        throw new RollError(`Missing target alias to delete.`);\r\n    }\r\n    const targetAlias = tokens[0];\r\n    if (!aliases[targetAlias]) {\r\n        throw new RollError(`Alias ${targetAlias} does not exist.`);\r\n    }\r\n    delete aliases[targetAlias];\r\n    localStorage.setItem('aliases', JSON.stringify(aliases));\r\n    return {message: `Removed ${targetAlias} from list of aliases.`, alias: targetAlias};\r\n}\r\n\r\n\r\nfunction aliasCommand(tokens) {\r\n    const aliases = JSON.parse(localStorage.aliases);\r\n    function listAliases() {\r\n        const aliases = JSON.parse(localStorage.aliases);\r\n        if (Object.keys(aliases).length === 0) {\r\n            return {message: `No aliases.`};\r\n        }\r\n        return {message: `Aliases: ${Object.keys(aliases).join(', ')}`,};\r\n    }\r\n    if (tokens.length < 1) {\r\n        return listAliases();\r\n    }\r\n    let frontToken = tokens[0];\r\n    tokens = tokens.slice(1);\r\n    if (frontToken === 'delete') {\r\n        return deleteCommand(tokens);\r\n    } \r\n    if (frontToken === 'list') {\r\n        return listAliases();\r\n    }\r\n    if (tokens.length < 1) {\r\n        if (!aliases[frontToken]) {\r\n            throw new RollError(`Alias ${frontToken} does not exist.`);\r\n        }\r\n        return {message: `${frontToken}: ${aliases[frontToken].rolls.join(', ')}`};\r\n    }\r\n    let aliasCode = tokens.join(' ');\r\n    aliases[frontToken] = {rolls: Array.from(aliasCode.matchAll(aliasRollPattern), x => x[1])};\r\n    aliasCode = aliasCode.replaceAll(aliasRollPattern, '');\r\n    aliasArgs(aliases[frontToken].rolls, aliasCode);\r\n    localStorage.setItem('aliases', JSON.stringify(aliases));\r\n    return {message: `Added ${frontToken} to aliases.`, alias: frontToken};\r\n}\r\n\r\n\r\nfunction callAlias(alias, argsString) {\r\n    let rolls = JSON.parse(localStorage.aliases)[alias].rolls;\r\n    // add any extra rolls\r\n    rolls = rolls.concat(Array.from(argsString.matchAll(aliasRollPattern), x => x[1]));\r\n    aliasArgs(rolls, argsString);\r\n    let crit = false;\r\n    rolls = rolls.map(x => {\r\n        let roll = compoundRoll(x, crit);\r\n        crit = roll.crit || crit;\r\n        return roll;\r\n    });\r\n    return {\r\n        message: `Calling ${alias}:`,\r\n        rolls,\r\n    };\r\n}\r\n\r\n\r\nfunction command(str) {\r\n    if (str === '') {\r\n        throw new RollError('Empty command.');\r\n    }\r\n    let tokens = str.split(whitespacePattern);\r\n    \r\n    let frontToken = tokens[0];\r\n    tokens = tokens.slice(1);\r\n    if (frontToken === 'alias') {\r\n        return aliasCommand(tokens);\r\n    } else if (frontToken === 'delete') {\r\n        return deleteCommand(tokens);\r\n    } else if (JSON.parse(localStorage.aliases)[frontToken]) {\r\n        return callAlias(frontToken, Array.from(tokens).join(' '));\r\n    } else {\r\n        return {\r\n            message: `Rolling ${str}:`,\r\n            rolls: [compoundRoll(str)],\r\n        };\r\n    }\r\n}\r\n\r\nexport default command;","import React from 'react';\nimport './App.css';\nimport command from './roll.js';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        if (!localStorage.aliases) {\n            localStorage.setItem('aliases', JSON.stringify({}))\n        }\n    }\n    \n    render() {\n        return (\n            <section>\n                <h1>quickroll</h1>\n                <Main />\n            </section>\n        )\n    }\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        if (!localStorage.aliases) {\n            localStorage.setItem('aliases', JSON.stringify({}))\n        }\n        this.state = {\n            rollCommand: '',\n            times: '',\n            output: '',\n            aliases: JSON.parse(localStorage.aliases || '{}'),\n            log: { components: [], currKey: 0 },\n        };\n        this.textInputRef = React.createRef();\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onRollFormChange = this.onRollFormChange.bind(this);\n        this.onLogClear = this.onLogClear.bind(this);\n    }\n    \n    onRollFormChange = (e => {\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({ [name]: value });\n    });\n    onLogClear = (e => {\n        e.preventDefault();\n        this.setState({ log: {components: [], currKey: 0}});\n    });\n    onSubmit = (e => {\n        e.preventDefault();\n        function getRolls(rollCommand, index, log) {\n            function pushToLog(log, message) {\n                if (log.components.length > 100) {\n                    log.components.pop();\n                }\n                log.components.unshift(<p key={`log#${log.currKey++}`}>{message}</p>);\n                log.currKey %= 101\n            }\n            let output;\n            try {\n                output = command(rollCommand);\n                pushToLog(log, output.message);\n                if (output.rolls) {\n                    output.rolls.forEach(x => {\n                        if (x.critString) {\n                            pushToLog(log, `${x.fullString}, ${x.critString}, ${x.result} ${x.label}`);\n                        } else {\n                            pushToLog(log, `${x.fullString} ${x.label}`);\n                        }\n                    });\n                    output = output.rolls.map((x, i) => <Roll key={`roll#${i}`} roll={x} />);\n                } else {\n                    output = <div className='flex-child'>{output.message}</div>;\n                }\n            } catch (err) {\n                pushToLog(log, err.message);\n                output = err.message;\n            }\n            return <Call key={`call#${index}`} rolls={output} />\n        }\n        if (this.state.rollCommand === 'clear') {\n            this.onLogClear(e);\n            this.setState({\n                rollCommand: '',\n                times: '',\n                output: '',\n            });\n        } else if (this.state.rollCommand !== '') {\n            let times = +this.state.times || 1;\n            let output = [...new Array(times).keys()].map((x, i) => getRolls(this.state.rollCommand, i, this.state.log));\n            this.setState({\n                rollCommand: '',\n                times: '',\n                output: output,\n                aliases: JSON.parse(localStorage.aliases || '{}'),\n                log: this.state.log,\n            });\n        }\n        this.textInputRef.current.focus();\n    });\n\n    render() {\n        return (\n            <section>\n                    <RollForm\n                        rollCommand={this.state.rollCommand}\n                        times={this.state.times}\n                        onRollFormChange={this.onRollFormChange}\n                        onSubmit={this.onSubmit}\n                        textInputRef={this.textInputRef} />\n                    <section className='h-container'>\n                        {this.state.output}\n                    </section>\n                    <section className='h-container'>\n                        <Aliases aliases={this.state.aliases} handleUpload={this.handleUpload} />\n                        <Log log={this.state.log.components} onLogClear={this.onLogClear} />\n                    </section>\n            </section>\n    )}\n}\n\nclass RollForm extends React.Component {\n    render() {\n        return (\n            <form>\n                <input className='input-text' type=\"text\" ref={this.props.textInputRef} autoFocus name=\"rollCommand\" value={this.props.rollCommand} onChange={this.props.onRollFormChange} />\n                <input className='input-text' type=\"text\" style={{ width: '30px' }} name=\"times\" value={this.props.times} onChange={this.props.onRollFormChange} />\n                <input className='input' type=\"submit\" value=\">\" onClick={this.props.onSubmit} />\n            </form>\n        );\n    };\n}\n\nclass Call extends React.Component {\n    render() {\n        return (\n            <section className='h-container flex-child' style={{ border: 'none', margin: '10px', maxWidth: '30%' }}>\n                {this.props.rolls}\n            </section>\n        )\n    }\n}\n\nclass Roll extends React.Component {\n    render() {\n        let res = this.props.roll.result + (this.props.roll.critResult || 0);\n        let label = this.props.roll.label || '';\n        let fullString = this.props.roll.fullString || '';\n        let critString = this.props.roll.critString || '';\n        let dice = this.props.roll.dice.map((x, i) => <DieImage key={`rollImage#${i}}`} die={x} />);\n        return (\n            <div className='flex-child tooltip' style={{ 'margin': '-1px', 'marginBottom': '0px' }}>\n                {dice}\n                <p>{res}<span style={{ fontSize: '.75em' }}> {label}</span></p>\n                <span className='tooltiptext'>{fullString}<br />{critString}</span>\n            </div>\n        );\n    }\n}\n\nclass DieImage extends React.Component {\n    render() {\n        let fileName = 'static/';\n        let colorOrGray = this.props.die.kept ? 'dice/' : 'gray_dice/';\n        fileName = `${fileName}${colorOrGray}d${this.props.die.sides}_${this.props.die.num}.svg`;\n        return (\n            <img src={fileName} alt={`dice: ${fileName}`} height='50px' />\n        );\n    }\n}\n\nclass Aliases extends React.Component {\n    render() {\n        let aliases = Object.keys(this.props.aliases);\n        aliases.sort();\n        aliases = aliases.map((x, i) => <p key={`alias#${i}`}>{x}</p>);\n        return (\n            <div className='flex-child aliases'>\n                <form style={{ padding: '5px' }}>\n                    <label className='h2'>Aliases</label>\n                </form>\n                <div>\n                    {aliases}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Log extends React.Component {\n    render() {\n        return (\n            <div className='flex-child log'>\n                <label className='h2'>\n                    Log\n                  <button className='input' onClick={this.props.onLogClear}>Clear</button>\n                </label>\n                <div className='inner-log'>\n                    {this.props.log}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}